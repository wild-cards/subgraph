// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Wildcard extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Wildcard entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Wildcard entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Wildcard", id.toString(), this);
  }

  static load(id: string): Wildcard | null {
    return store.get("Wildcard", id) as Wildcard | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get price(): string {
    let value = this.get("price");
    return value.toString();
  }

  set price(value: string) {
    this.set("price", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get patronageNumerator(): BigInt {
    let value = this.get("patronageNumerator");
    return value.toBigInt();
  }

  set patronageNumerator(value: BigInt) {
    this.set("patronageNumerator", Value.fromBigInt(value));
  }

  get timeAcquired(): BigInt {
    let value = this.get("timeAcquired");
    return value.toBigInt();
  }

  set timeAcquired(value: BigInt) {
    this.set("timeAcquired", Value.fromBigInt(value));
  }

  get previousOwners(): Array<string> | null {
    let value = this.get("previousOwners");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set previousOwners(value: Array<string> | null) {
    if (value === null) {
      this.unset("previousOwners");
    } else {
      this.set("previousOwners", Value.fromStringArray(value as Array<string>));
    }
  }

  get priceHistory(): Array<string> | null {
    let value = this.get("priceHistory");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set priceHistory(value: Array<string> | null) {
    if (value === null) {
      this.unset("priceHistory");
    } else {
      this.set("priceHistory", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Price extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Price entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Price entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Price", id.toString(), this);
  }

  static load(id: string): Price | null {
    return store.get("Price", id) as Price | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get timeSet(): BigInt {
    let value = this.get("timeSet");
    return value.toBigInt();
  }

  set timeSet(value: BigInt) {
    this.set("timeSet", Value.fromBigInt(value));
  }
}

export class PreviousPatron extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PreviousPatron entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PreviousPatron entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PreviousPatron", id.toString(), this);
  }

  static load(id: string): PreviousPatron | null {
    return store.get("PreviousPatron", id) as PreviousPatron | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get patron(): string {
    let value = this.get("patron");
    return value.toString();
  }

  set patron(value: string) {
    this.set("patron", Value.fromString(value));
  }

  get timeAcquired(): BigInt {
    let value = this.get("timeAcquired");
    return value.toBigInt();
  }

  set timeAcquired(value: BigInt) {
    this.set("timeAcquired", Value.fromBigInt(value));
  }

  get timeSold(): BigInt {
    let value = this.get("timeSold");
    return value.toBigInt();
  }

  set timeSold(value: BigInt) {
    this.set("timeSold", Value.fromBigInt(value));
  }
}

export class Patron extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Patron entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Patron entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Patron", id.toString(), this);
  }

  static load(id: string): Patron | null {
    return store.get("Patron", id) as Patron | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get lastUpdated(): BigInt {
    let value = this.get("lastUpdated");
    return value.toBigInt();
  }

  set lastUpdated(value: BigInt) {
    this.set("lastUpdated", Value.fromBigInt(value));
  }

  get previouslyOwnedTokens(): Array<string> | null {
    let value = this.get("previouslyOwnedTokens");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set previouslyOwnedTokens(value: Array<string> | null) {
    if (value === null) {
      this.unset("previouslyOwnedTokens");
    } else {
      this.set(
        "previouslyOwnedTokens",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get tokens(): Array<string> | null {
    let value = this.get("tokens");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tokens(value: Array<string> | null) {
    if (value === null) {
      this.unset("tokens");
    } else {
      this.set("tokens", Value.fromStringArray(value as Array<string>));
    }
  }
}
