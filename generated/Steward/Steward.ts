// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class LogBuy extends EthereumEvent {
  get params(): LogBuy__Params {
    return new LogBuy__Params(this);
  }
}

export class LogBuy__Params {
  _event: LogBuy;

  constructor(event: LogBuy) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogPriceChange extends EthereumEvent {
  get params(): LogPriceChange__Params {
    return new LogPriceChange__Params(this);
  }
}

export class LogPriceChange__Params {
  _event: LogPriceChange;

  constructor(event: LogPriceChange) {
    this._event = event;
  }

  get newPrice(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LogForeclosure extends EthereumEvent {
  get params(): LogForeclosure__Params {
    return new LogForeclosure__Params(this);
  }
}

export class LogForeclosure__Params {
  _event: LogForeclosure;

  constructor(event: LogForeclosure) {
    this._event = event;
  }

  get prevOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogCollection extends EthereumEvent {
  get params(): LogCollection__Params {
    return new LogCollection__Params(this);
  }
}

export class LogCollection__Params {
  _event: LogCollection;

  constructor(event: LogCollection) {
    this._event = event;
  }

  get collected(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LogRemainingDepositUpdate extends EthereumEvent {
  get params(): LogRemainingDepositUpdate__Params {
    return new LogRemainingDepositUpdate__Params(this);
  }
}

export class LogRemainingDepositUpdate__Params {
  _event: LogRemainingDepositUpdate;

  constructor(event: LogRemainingDepositUpdate) {
    this._event = event;
  }

  get tokenPatron(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get remainingDeposit(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AddToken extends EthereumEvent {
  get params(): AddToken__Params {
    return new AddToken__Params(this);
  }
}

export class AddToken__Params {
  _event: AddToken;

  constructor(event: AddToken) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get patronageNumerator(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Steward__patronageOwedWithTimestampResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Steward__patronageOwedPatronWithTimestampResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Steward extends SmartContract {
  static bind(address: Address): Steward {
    return new Steward("Steward", address);
  }

  currentPatron(param0: BigInt): Address {
    let result = super.call("currentPatron", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_currentPatron(param0: BigInt): CallResult<Address> {
    let result = super.tryCall("currentPatron", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  assetToken(): Address {
    let result = super.call("assetToken", []);

    return result[0].toAddress();
  }

  try_assetToken(): CallResult<Address> {
    let result = super.tryCall("assetToken", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  benefactors(param0: BigInt): Address {
    let result = super.call("benefactors", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_benefactors(param0: BigInt): CallResult<Address> {
    let result = super.tryCall("benefactors", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  currentCollected(param0: BigInt): BigInt {
    let result = super.call("currentCollected", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_currentCollected(param0: BigInt): CallResult<BigInt> {
    let result = super.tryCall("currentCollected", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  timeHeld(param0: BigInt, param1: Address): BigInt {
    let result = super.call("timeHeld", [
      EthereumValue.fromUnsignedBigInt(param0),
      EthereumValue.fromAddress(param1)
    ]);

    return result[0].toBigInt();
  }

  try_timeHeld(param0: BigInt, param1: Address): CallResult<BigInt> {
    let result = super.tryCall("timeHeld", [
      EthereumValue.fromUnsignedBigInt(param0),
      EthereumValue.fromAddress(param1)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  price(param0: BigInt): BigInt {
    let result = super.call("price", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_price(param0: BigInt): CallResult<BigInt> {
    let result = super.tryCall("price", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  patrons(param0: BigInt, param1: Address): boolean {
    let result = super.call("patrons", [
      EthereumValue.fromUnsignedBigInt(param0),
      EthereumValue.fromAddress(param1)
    ]);

    return result[0].toBoolean();
  }

  try_patrons(param0: BigInt, param1: Address): CallResult<boolean> {
    let result = super.tryCall("patrons", [
      EthereumValue.fromUnsignedBigInt(param0),
      EthereumValue.fromAddress(param1)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  state(param0: BigInt): i32 {
    let result = super.call("state", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toI32();
  }

  try_state(param0: BigInt): CallResult<i32> {
    let result = super.tryCall("state", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  timeAcquired(param0: BigInt): BigInt {
    let result = super.call("timeAcquired", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_timeAcquired(param0: BigInt): CallResult<BigInt> {
    let result = super.tryCall("timeAcquired", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  timeLastCollected(param0: BigInt): BigInt {
    let result = super.call("timeLastCollected", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_timeLastCollected(param0: BigInt): CallResult<BigInt> {
    let result = super.tryCall("timeLastCollected", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  timeLastCollectedPatron(param0: Address): BigInt {
    let result = super.call("timeLastCollectedPatron", [
      EthereumValue.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_timeLastCollectedPatron(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("timeLastCollectedPatron", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  patronageDenominator(): BigInt {
    let result = super.call("patronageDenominator", []);

    return result[0].toBigInt();
  }

  try_patronageDenominator(): CallResult<BigInt> {
    let result = super.tryCall("patronageDenominator", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  benefactorFunds(param0: Address): BigInt {
    let result = super.call("benefactorFunds", [
      EthereumValue.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_benefactorFunds(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("benefactorFunds", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  totalCollected(param0: BigInt): BigInt {
    let result = super.call("totalCollected", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_totalCollected(param0: BigInt): CallResult<BigInt> {
    let result = super.tryCall("totalCollected", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  patronageNumerator(param0: BigInt): BigInt {
    let result = super.call("patronageNumerator", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_patronageNumerator(param0: BigInt): CallResult<BigInt> {
    let result = super.tryCall("patronageNumerator", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  deposit(param0: Address): BigInt {
    let result = super.call("deposit", [EthereumValue.fromAddress(param0)]);

    return result[0].toBigInt();
  }

  try_deposit(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("deposit", [EthereumValue.fromAddress(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  admin(): Address {
    let result = super.call("admin", []);

    return result[0].toAddress();
  }

  try_admin(): CallResult<Address> {
    let result = super.tryCall("admin", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  totalPatronOwnedTokenCost(param0: Address): BigInt {
    let result = super.call("totalPatronOwnedTokenCost", [
      EthereumValue.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_totalPatronOwnedTokenCost(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("totalPatronOwnedTokenCost", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  patronageOwed(tokenId: BigInt): BigInt {
    let result = super.call("patronageOwed", [
      EthereumValue.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_patronageOwed(tokenId: BigInt): CallResult<BigInt> {
    let result = super.tryCall("patronageOwed", [
      EthereumValue.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  patronageOwedWithTimestamp(
    tokenId: BigInt
  ): Steward__patronageOwedWithTimestampResult {
    let result = super.call("patronageOwedWithTimestamp", [
      EthereumValue.fromUnsignedBigInt(tokenId)
    ]);

    return new Steward__patronageOwedWithTimestampResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_patronageOwedWithTimestamp(
    tokenId: BigInt
  ): CallResult<Steward__patronageOwedWithTimestampResult> {
    let result = super.tryCall("patronageOwedWithTimestamp", [
      EthereumValue.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Steward__patronageOwedWithTimestampResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  patronageOwedPatron(tokenPatron: Address): BigInt {
    let result = super.call("patronageOwedPatron", [
      EthereumValue.fromAddress(tokenPatron)
    ]);

    return result[0].toBigInt();
  }

  try_patronageOwedPatron(tokenPatron: Address): CallResult<BigInt> {
    let result = super.tryCall("patronageOwedPatron", [
      EthereumValue.fromAddress(tokenPatron)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  patronageOwedPatronWithTimestamp(
    tokenPatron: Address
  ): Steward__patronageOwedPatronWithTimestampResult {
    let result = super.call("patronageOwedPatronWithTimestamp", [
      EthereumValue.fromAddress(tokenPatron)
    ]);

    return new Steward__patronageOwedPatronWithTimestampResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_patronageOwedPatronWithTimestamp(
    tokenPatron: Address
  ): CallResult<Steward__patronageOwedPatronWithTimestampResult> {
    let result = super.tryCall("patronageOwedPatronWithTimestamp", [
      EthereumValue.fromAddress(tokenPatron)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Steward__patronageOwedPatronWithTimestampResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  foreclosedPatron(tokenPatron: Address): boolean {
    let result = super.call("foreclosedPatron", [
      EthereumValue.fromAddress(tokenPatron)
    ]);

    return result[0].toBoolean();
  }

  try_foreclosedPatron(tokenPatron: Address): CallResult<boolean> {
    let result = super.tryCall("foreclosedPatron", [
      EthereumValue.fromAddress(tokenPatron)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  foreclosed(tokenId: BigInt): boolean {
    let result = super.call("foreclosed", [
      EthereumValue.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_foreclosed(tokenId: BigInt): CallResult<boolean> {
    let result = super.tryCall("foreclosed", [
      EthereumValue.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  depositAbleToWithdraw(tokenPatron: Address): BigInt {
    let result = super.call("depositAbleToWithdraw", [
      EthereumValue.fromAddress(tokenPatron)
    ]);

    return result[0].toBigInt();
  }

  try_depositAbleToWithdraw(tokenPatron: Address): CallResult<BigInt> {
    let result = super.tryCall("depositAbleToWithdraw", [
      EthereumValue.fromAddress(tokenPatron)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  foreclosureTimePatron(tokenPatron: Address): BigInt {
    let result = super.call("foreclosureTimePatron", [
      EthereumValue.fromAddress(tokenPatron)
    ]);

    return result[0].toBigInt();
  }

  try_foreclosureTimePatron(tokenPatron: Address): CallResult<BigInt> {
    let result = super.tryCall("foreclosureTimePatron", [
      EthereumValue.fromAddress(tokenPatron)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  foreclosureTime(tokenId: BigInt): BigInt {
    let result = super.call("foreclosureTime", [
      EthereumValue.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_foreclosureTime(tokenId: BigInt): CallResult<BigInt> {
    let result = super.tryCall("foreclosureTime", [
      EthereumValue.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  withdrawDeposit(_wei: BigInt): BigInt {
    let result = super.call("withdrawDeposit", [
      EthereumValue.fromUnsignedBigInt(_wei)
    ]);

    return result[0].toBigInt();
  }

  try_withdrawDeposit(_wei: BigInt): CallResult<BigInt> {
    let result = super.tryCall("withdrawDeposit", [
      EthereumValue.fromUnsignedBigInt(_wei)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }
}

export class InitializeCall extends EthereumCall {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _assetToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _admin(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _patronageDenominator(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class ListNewTokensCall extends EthereumCall {
  get inputs(): ListNewTokensCall__Inputs {
    return new ListNewTokensCall__Inputs(this);
  }

  get outputs(): ListNewTokensCall__Outputs {
    return new ListNewTokensCall__Outputs(this);
  }
}

export class ListNewTokensCall__Inputs {
  _call: ListNewTokensCall;

  constructor(call: ListNewTokensCall) {
    this._call = call;
  }

  get tokens(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _benefactors(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _patronageNumerator(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class ListNewTokensCall__Outputs {
  _call: ListNewTokensCall;

  constructor(call: ListNewTokensCall) {
    this._call = call;
  }
}

export class ChangeReceivingBenefactorCall extends EthereumCall {
  get inputs(): ChangeReceivingBenefactorCall__Inputs {
    return new ChangeReceivingBenefactorCall__Inputs(this);
  }

  get outputs(): ChangeReceivingBenefactorCall__Outputs {
    return new ChangeReceivingBenefactorCall__Outputs(this);
  }
}

export class ChangeReceivingBenefactorCall__Inputs {
  _call: ChangeReceivingBenefactorCall;

  constructor(call: ChangeReceivingBenefactorCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newReceivingBenefactor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ChangeReceivingBenefactorCall__Outputs {
  _call: ChangeReceivingBenefactorCall;

  constructor(call: ChangeReceivingBenefactorCall) {
    this._call = call;
  }
}

export class ChangeAdminCall extends EthereumCall {
  get inputs(): ChangeAdminCall__Inputs {
    return new ChangeAdminCall__Inputs(this);
  }

  get outputs(): ChangeAdminCall__Outputs {
    return new ChangeAdminCall__Outputs(this);
  }
}

export class ChangeAdminCall__Inputs {
  _call: ChangeAdminCall;

  constructor(call: ChangeAdminCall) {
    this._call = call;
  }

  get _admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeAdminCall__Outputs {
  _call: ChangeAdminCall;

  constructor(call: ChangeAdminCall) {
    this._call = call;
  }
}

export class _collectPatronageCall extends EthereumCall {
  get inputs(): _collectPatronageCall__Inputs {
    return new _collectPatronageCall__Inputs(this);
  }

  get outputs(): _collectPatronageCall__Outputs {
    return new _collectPatronageCall__Outputs(this);
  }
}

export class _collectPatronageCall__Inputs {
  _call: _collectPatronageCall;

  constructor(call: _collectPatronageCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class _collectPatronageCall__Outputs {
  _call: _collectPatronageCall;

  constructor(call: _collectPatronageCall) {
    this._call = call;
  }
}

export class _collectPatronagePatronCall extends EthereumCall {
  get inputs(): _collectPatronagePatronCall__Inputs {
    return new _collectPatronagePatronCall__Inputs(this);
  }

  get outputs(): _collectPatronagePatronCall__Outputs {
    return new _collectPatronagePatronCall__Outputs(this);
  }
}

export class _collectPatronagePatronCall__Inputs {
  _call: _collectPatronagePatronCall;

  constructor(call: _collectPatronagePatronCall) {
    this._call = call;
  }

  get tokenPatron(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class _collectPatronagePatronCall__Outputs {
  _call: _collectPatronagePatronCall;

  constructor(call: _collectPatronagePatronCall) {
    this._call = call;
  }
}

export class DepositWeiCall extends EthereumCall {
  get inputs(): DepositWeiCall__Inputs {
    return new DepositWeiCall__Inputs(this);
  }

  get outputs(): DepositWeiCall__Outputs {
    return new DepositWeiCall__Outputs(this);
  }
}

export class DepositWeiCall__Inputs {
  _call: DepositWeiCall;

  constructor(call: DepositWeiCall) {
    this._call = call;
  }
}

export class DepositWeiCall__Outputs {
  _call: DepositWeiCall;

  constructor(call: DepositWeiCall) {
    this._call = call;
  }
}

export class DepositWeiPatronCall extends EthereumCall {
  get inputs(): DepositWeiPatronCall__Inputs {
    return new DepositWeiPatronCall__Inputs(this);
  }

  get outputs(): DepositWeiPatronCall__Outputs {
    return new DepositWeiPatronCall__Outputs(this);
  }
}

export class DepositWeiPatronCall__Inputs {
  _call: DepositWeiPatronCall;

  constructor(call: DepositWeiPatronCall) {
    this._call = call;
  }

  get patron(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DepositWeiPatronCall__Outputs {
  _call: DepositWeiPatronCall;

  constructor(call: DepositWeiPatronCall) {
    this._call = call;
  }
}

export class BuyCall extends EthereumCall {
  get inputs(): BuyCall__Inputs {
    return new BuyCall__Inputs(this);
  }

  get outputs(): BuyCall__Outputs {
    return new BuyCall__Outputs(this);
  }
}

export class BuyCall__Inputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyCall__Outputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }
}

export class ChangePriceCall extends EthereumCall {
  get inputs(): ChangePriceCall__Inputs {
    return new ChangePriceCall__Inputs(this);
  }

  get outputs(): ChangePriceCall__Outputs {
    return new ChangePriceCall__Outputs(this);
  }
}

export class ChangePriceCall__Inputs {
  _call: ChangePriceCall;

  constructor(call: ChangePriceCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ChangePriceCall__Outputs {
  _call: ChangePriceCall;

  constructor(call: ChangePriceCall) {
    this._call = call;
  }
}

export class WithdrawDepositCall extends EthereumCall {
  get inputs(): WithdrawDepositCall__Inputs {
    return new WithdrawDepositCall__Inputs(this);
  }

  get outputs(): WithdrawDepositCall__Outputs {
    return new WithdrawDepositCall__Outputs(this);
  }
}

export class WithdrawDepositCall__Inputs {
  _call: WithdrawDepositCall;

  constructor(call: WithdrawDepositCall) {
    this._call = call;
  }

  get _wei(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawDepositCall__Outputs {
  _call: WithdrawDepositCall;

  constructor(call: WithdrawDepositCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawBenefactorFundsCall extends EthereumCall {
  get inputs(): WithdrawBenefactorFundsCall__Inputs {
    return new WithdrawBenefactorFundsCall__Inputs(this);
  }

  get outputs(): WithdrawBenefactorFundsCall__Outputs {
    return new WithdrawBenefactorFundsCall__Outputs(this);
  }
}

export class WithdrawBenefactorFundsCall__Inputs {
  _call: WithdrawBenefactorFundsCall;

  constructor(call: WithdrawBenefactorFundsCall) {
    this._call = call;
  }
}

export class WithdrawBenefactorFundsCall__Outputs {
  _call: WithdrawBenefactorFundsCall;

  constructor(call: WithdrawBenefactorFundsCall) {
    this._call = call;
  }
}

export class WithdrawBenefactorFundsToCall extends EthereumCall {
  get inputs(): WithdrawBenefactorFundsToCall__Inputs {
    return new WithdrawBenefactorFundsToCall__Inputs(this);
  }

  get outputs(): WithdrawBenefactorFundsToCall__Outputs {
    return new WithdrawBenefactorFundsToCall__Outputs(this);
  }
}

export class WithdrawBenefactorFundsToCall__Inputs {
  _call: WithdrawBenefactorFundsToCall;

  constructor(call: WithdrawBenefactorFundsToCall) {
    this._call = call;
  }

  get benefactor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawBenefactorFundsToCall__Outputs {
  _call: WithdrawBenefactorFundsToCall;

  constructor(call: WithdrawBenefactorFundsToCall) {
    this._call = call;
  }
}

export class ExitCall extends EthereumCall {
  get inputs(): ExitCall__Inputs {
    return new ExitCall__Inputs(this);
  }

  get outputs(): ExitCall__Outputs {
    return new ExitCall__Outputs(this);
  }
}

export class ExitCall__Inputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }
}

export class ExitCall__Outputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }
}
